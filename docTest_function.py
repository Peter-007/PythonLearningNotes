# coding = utf-8

'''
函数声明:
def name([arg,... arg = value,... *arg, **kwarg]):
    suite
1.
2. 当编译器遇到 def,会生成创建函数对象指令。
   也就是说 def 是执⾏行指令,⽽不仅仅是个语法关键字。
   可以在任何地⽅方动态创建函数对象。

lambda函数
不同于⽤用 def 定义复杂函数,lambda 只能是有返回值的简单的表达式。使⽤用赋值语句会引发语法 错误,可以考虑⽤用函数代替。

'''

'''
*****************************************************
1. 函数创建
   函数是第一类对象,可作为其他函数的实参或返回值。
   函数总是有返回值。就算没有 return,默认也会返回 None。
*****************************************************
'''
def test1(name):
    '''

    >>> test1('a').__name__
    'a'

    >>> test1('b').__name__
    'b'

    >>> test1('c').__name__
    'b'

    >>> test1('a')()
    call function a

    '''
    if name == "a":
        def a():
            print('call function a')
        return a
    else:
        def b(): pass
        return b

'''
*************************************************************
2. 参数
   2.1 函数的传参方式灵活多变,可按位置顺序传参,也可不关⼼顺序⽤命名实参。
   2.2 ⽀持参数默认值。不过要⼩⼼,
       默认值对象在创建函数时生成,所有调用都使⽤同⼀对象。
       如果该默认值是可变类型,那么就如同 C 静态局部变量。
*************************************************************
'''
def test2(a, b):
    '''

    >>> test2(1,2)      # 位置参数
    1 2

    >>> test2(b=3,a=4)  # 命名参数
    4 3
    '''
    print(a, b)


if __name__ == '__main__':
    import doctest
    doctest.testmod(verbose=True)