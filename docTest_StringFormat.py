
'''
Python 提供了两种字符串格式化⽅方法,除了熟悉的 C 样式外,还有更强⼤的 format。
*******************************************************
格式：%[(key)][flags][width][.precision]typecode
标记:- 左对⻬齐,+ 数字符号,# 进制前缀,或者⽤用空格、0 填充。
*******************************************************

>>> dictA = dict(key='a', value=23); print(dictA)
{'key': 'a', 'value': 23}

>>> '%(key)s = %(value)d' % dictA
'a = 23'

>>> "[%-10s]" % 'abc'   # 左对齐
'[abc       ]'

>>> "[%10s]" % 'abc'    # 右对齐
'[       abc]'

>>> "%+d, %+d" % (5, -6)
'+5, -6'

>>> "%05d" % 12         # 填充
'00012'

>>> "%0.2f" % 2.345     # 小数
'2.35'

>>> "%#X; %x" % (100,100)
'0X64; 64'


********************************************************************
format 方法⽀支持更多的数据类型,包括列表、字典、对象成员等。
{field!convertflag:formatspec}
格式化规范:
formatspec: [[fill]align][sign][#][0][width][.precision][typecode]
********************************************************************

>>> "{key}={value}".format(key='a',value=10)
'a=10'

>>> "{0},{1},{0}".format(12,34)    # filed可多次使用
'12,34,12'

>>> "{0:,}; {1:,.2f}; {1:.2f}".format(1234567,123456.789)   # 千分位，带小数
'1,234,567; 123,456.79; 123456.79'

>>> "{0:<5};{1:^5};{2:>5};{3:*^5}".format('a','b','c','d')
'a    ;  b  ;    c;**d**'

>>> import sys
>>> "{0.platform}".format(sys)
'darwin'

'''


if __name__ == "__main__":
    import doctest
    doctest.testmod()